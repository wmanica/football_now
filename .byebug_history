q
c
index
node
q
node
q
@games
index
c
node
index
q
node
index
@games
n
@games[index - 2].merge!({ tv: node.attributes['alt'].value })
node.attributes['alt'].value
index
@games
node.attributes['alt'].value
index
q
node.attributes
node.attributes['alt'].value
index
c
n
index
c
node
index
c
q
index
node
c
node
index
next
node
index
@games
c
@games
q
doc.css('img').last.attributes['alt'].value
doc.css('img').last.attributes['alt']
doc.css('img').last.attributes[:alt]
doc.css('img').last.attributes
doc.css('img').last.attributes[:value]
doc.css('img').last.attributes.value
doc.css('img').last.attributes
doc.css('img').last
doc.css('img')
doc.css('img').last['value']
doc.css('img').last.value
doc.css('img').last
doc.css('img').last.text
doc.css('img').last.value
doc.css('img').last
doc.css('img').second
doc.css('img')
doc.css('img').first
doc.css('img')
doc.css('td').first
doc.css('td').fist
doc.css('td').class
doc.css('td').class?
doc.css('td')
q
c
node
c
node
c
node
c
node
c
node
node.children
c
node.children
c
node.children.text
c
node.children.text
c
node.children.text
c
node.children.text
c
@games
q
c
@games
c
games
q
DateTime.parse(node.children.text).new_offset('+0100').strftime('%H:%M')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%H %M')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%H')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%T')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%t')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%T')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%a %T ')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%a %F %T ')
DateTime.parse(node.children.text).new_offset('+0100').strftime('%a %F %T %Z')
DateTime.parse(node.children.text).new_offset('+0100').to_time
DateTime.parse(node.children.text).new_offset('+0100')
DateTime.parse(node.children.text)
DateTime.parse(node.children.text).
DateTime.parse(node.children.text).new_offset('+0100')
Time.parse(node.children.text).new_offset('+0100')
Time.parse(node.children.text).formatted_offset
Time.parse(node.children.text).zone ="GMT"
Time.parse(node.children.text).zone
Time.parse(node.children.text).methods
Time.parse(node.children.text)
Time.parse(node.children.text).in_time_zone(waw_time)
Time.parse(node.children.text)
Time.parse(node.children.text).in_time_zone(waw_time)
Time.now.in_time_zone(waw_time)
waw_time = ActiveSupport::TimeZone.new("Europe/Warsaw")
waw_time = TimeZone.new("Europe/Warsaw")
require 'rails'
l=
waw_time = TimeZone.new("Europe/Warsaw")
waw_time = ActiveSupport::TimeZone.new("Europe/Warsaw")
DateTime.now.to_time.
time
DateTime.now.to_time.getgm
DateTime.now.to_time.getgmt
DateTime.now.to_time.getutc
DateTime.now.to_time.gmtoff
DateTime.now.to_time.gmt_offset
DateTime.now.to_time.gmt?
DateTime.now.to_time.utc?
DateTime.now.to_time.getlocal
DateTime.now.to_time.methods
DateTime.now.to_time + DateTime.now.to_time.hour + 1
DateTime.now.to_time.hour + 1
DateTime.now.to_time.hour
DateTime.now.to_time + 1.hour
DateTime.now.to_time + 1
DateTime.now.to_time.methods
DateTime.now.to_time.to_time
DateTime.now.to_time.methods
DateTime.now.to_time.metgods
DateTime.now.to_time
DateTime.now.methods.to_time
DateTime.now.methods
DateTime.now.singleton_methods - DateTime.now.methods
DateTime.now.methods - DateTime.now.singleton_methods
DateTime.now.methods
DateTime.now.new_offset
DateTime.now.methods.new_offset
DateTime.now.methods.new:offset
DateTime.now.methods
DateTime.now
DateTime
now = DateTime.now
now = DateTime.now.utc
now = DateTime.now.tuc
Time.at(Time.parse(node.children.text) + Time.zone_offset('GMT'))
Time.at(now + Time.zone_offset('GMT'))
DateTime.new(2000).in_time_zone('Alaska')
DateTime.zone
Time.zone
Time.zone = "Lisbon"
Time.zone_offset('+1')
Time.zone_offset('GMT 1')
Time.zone_offset('GMT+1')
Time.zone_offset('GMT1')
Time.zone_offset('GMT')
Time.at(now + Time.zone_offset('GMT'))
Time.at(now + Time.zone_offset('PST'))
Time.at
Time.by_offset
now
now = tz.now
tzinfo
tz.to_local
tz
tz = TZInfo::Timezone.get('Europe/Lisbon')
tz.to_local
tz.period_for_local
tz.now
tz.methods
tz.to_local(Time.new(2021,10,21, 12, 30, 0, '+01:00'))
l=
tz.to_local(Time.new(2021,10,21, 12, 30, 0))
tz.to_local(Time.new(2021,10,21, 12, 30, 0)
tz.to_local(Time.parse(node.children.text))
tz.to_local(Time.parse(node.children.text)
tz
                    tz = TZInfo::Timezone.get('Europe/Lisbon')
l=
TZInfo::TimezoneProxy.all_country_zones
TZInfo.all_country_zones
TZInfo
tz
tz.to_local
tz.period_for_local
tz.to_local
Time.parse(node.children.text)
Time.parse(node.children.text).ctime
Time.parse(node.children.text).time
Time.parse(node.children.text)
Time.parese(node.children.text)
node.children.text
tz.canonical_zone
tz.canonical_identifier
tz.canonical_indetifier
tz.get
tz
now
quit
c
return
c
tz.now
n
return
Time.parse(node.children.text)
Time.parse(node.children.text).utc
Time.parse(node.children.text)
Time.parse(node.children.text).min(2)
Time.parse(node.children.text)
Time.parse(node.children.text).min
Time.parse(node.children.text)
Time.parse(node.children.text).min
c
Time.parse(node.children.text).min
c
Time.parse(node.children.text).min
return
game[1][:time]
game[1][:game]
game[1]
game[0]
game.second
game.first
game
game[:game]
game
c
return
games
games[index -1].merge!({ time: node.children.text })
games[index -1].merge!{ time: node.children.text })
games[0]
games
c
